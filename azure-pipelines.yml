# Testing the Azure Pipeline logic in the following order:
# 1. Get the Appropriate variables like BlueprintsPath, BlueprintName, etc.
# 2. Save the new blueprint as Draft (Import-AzBlueprintWithArtifacts)
# 3. Publish the Blueprint as a *.TEST version since we do NOT know if everything will work as expected
# 4. Assign the Blueprint to a Test Environment
# 5. If everything works as expected (Assignment's provisioning status is Successful) -> Publish the Blueprint as *.STABLE version

trigger:
  - master

variables:
  azConnection: "http://AzDevOps"
  azSubscriptionId: "ac658ff9-95d0-4719-9f1f-58c5554960c9"
  location: "westeurope"
  blueprintsPath: "$(System.DefaultWorkingDirectory)/Blueprints/"
  blueprintName: "HelloBlueprintDemo"
  testVersion: "$(Build.BuildId).TEST"
  stableVersion: "$(Build.BuildId).STABLE"

stages:
  - stage: "Build_Stage"
    displayName: "BUILD STAGE"
    pool: "Default"
    jobs:
      - job: "Clean_Workspace"
        displayName: "Clean Workspace"
        workspace:
          clean: "all"
      - job: "Build_Blueprint"
        displayName: "Build Blueprint"
        # dependsOn: "Clean_Workspace"
        steps:
          - task: PowerShell@2
            name: "List_Items"
            displayName: "List Child Items"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Current Location is: $(Get-Location)"
                Write-Host "WorkDir Location is: " $(System.DefaultWorkingDirectory)
                Write-Host "Blueprints Path is: $(blueprintsPath)"
                Get-ChildItem $(blueprintsPath)
          - task: PowerShell@2
            name: "Check_AzBlueprint"
            displayName: "Verify/Install AzBlueprints Module"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Current PowerShell Version is: " $PSVersionTable.PSVersion
                $azModuleExists = Get-Module -ListAvailable | Where-Object Name -like "Az"
                If ($null -ne $azModuleExists) {
                  Write-Host "AzModule exists already. Value is: $azModuleExists version $($azModuleExists.Version)"
                  $bpModuleExists = Get-Module -ListAvailable | Where-Object Name -like "*Blueprint"
                  If ($null -ne $bpModuleExists) {
                    Write-Host "$($bpModuleExists.Name) Module exists already. Continue pipeline..."
                  } Else {
                    Write-Host "Az.Blueprint Module does not exist. Let's install it..."
                    Install-Module -Name "Az.Blueprint" -AllowClobber -Force
                    Import-Module -Name "Az.Blueprint"
                    Write-Host "Successfully installed Az.Blueprint Module."
                  }
                } Else {
                  Write-Host "AzModule does not exist... Let's install it firstly."
                  Install-Module -Name Az -AllowClobber
                  Install-Module -Name Az.Blueprint -AllowClobber
                  Write-Host "Successfully installed Az Module and Az.Blueprint Module"
                }
          - task: AzurePowershell@5
            name: "PrintBuildInfo"
            displayName: "Print Build Information"
            inputs:
              azureSubscription: $(azConnection)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                $azBlueprint = Get-AzBlueprint -Name $(blueprintName) -SubscriptionId $(azSubscriptionId)
                $bpLastVersion = [Double] $azBlueprint.Versions[$azBlueprint.Versions.Length-1]
                Write-Host "Azure Blueprint Details" -ForegroundColor DarkCyan
                Write-Host "Blueprint's Name: $(blueprintName)" -ForegroundColor DarkCyan
                Write-Host "Blueprint's Target: Subscription with ID $(azSubscriptionId)" -ForegroundColor DarkCyan
                $bpCodeDir = "$(blueprintsPath)" + "$(blueprintName)"
                Write-Host "Blueprint's Code Directory: $(bpCodeDir)" -ForegroundColor DarkCyan
                Write-Host "Blueprint's Last Version: $bpLastVersion" -ForegroundColor DarkCyan
                Write-Host "Blueprint's New Version: $bpNewVersion" -ForegroundColor DarkCyan
