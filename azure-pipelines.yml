# Testing the Azure Pipeline logic in the following order:
# 1. Get the Appropriate variables like BlueprintsPath, BlueprintName, etc.
# 2. Save the new blueprint as Draft (Import-AzBlueprintWithArtifacts)
# 3. Publish the Blueprint as a *.TEST version since we do NOT know if everything will work as expected
# 4. Assign the Blueprint to a Test Environment
# 5. If everything works as expected (Assignment's provisioning status is Successful) -> Publish the Blueprint as *.STABLE version

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - AzurePolicy/*
    - readme.md
    - .gitignore

variables:
  azConnection: "http://AzDevOps"
  azSubscriptionId: "ac658ff9-95d0-4719-9f1f-58c5554960c9"
  location: "westeurope"
  blueprintsPath: "$(System.DefaultWorkingDirectory)/Blueprints/"
  blueprintName: "HelloBlueprintDemo"
  organization: "Ostroveni"

stages:
  - stage: "Azure_Blueprints"
    displayName: "Azure Blueprints"
    pool: "Default"
    jobs:
      - job: "Clean_Workspace"
        displayName: "Clean Workspace"
        workspace:
          clean: "all"
      - job: "Build_Blueprint"
        displayName: "Build Blueprint"
        # dependsOn: "Clean_Workspace"
        steps:
          - task: PowerShell@2
            name: "List_Items"
            displayName: "List Child Items"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Current Location is: $(Get-Location)"
                Write-Host "WorkDir Location is: " $(System.DefaultWorkingDirectory)
                Write-Host "Blueprints Path is: $(blueprintsPath)"
                Get-ChildItem $(blueprintsPath)
          - task: PowerShell@2
            name: "Check_AzBlueprint"
            displayName: "Verify/Install AzBlueprints Module"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Current PowerShell Version is: " $PSVersionTable.PSVersion
                $azModuleExists = Get-Module -ListAvailable | Where-Object Name -like "Az"
                If ($null -ne $azModuleExists) {
                  Write-Host "AzModule exists already. Value is: $azModuleExists version $($azModuleExists.Version)"
                  $bpModuleExists = Get-Module -ListAvailable | Where-Object Name -like "*Blueprint"
                  If ($null -ne $bpModuleExists) {
                    Write-Host "$($bpModuleExists.Name) Module exists already. Continue pipeline..."
                  } Else {
                    Write-Host "Az.Blueprint Module does not exist. Let's install it..."
                    Install-Module -Name "Az.Blueprint" -AllowClobber -Force
                    Import-Module -Name "Az.Blueprint"
                    Write-Host "Successfully installed Az.Blueprint Module."
                  }
                } Else {
                  Write-Host "AzModule does not exist... Let's install it firstly."
                  Install-Module -Name Az -AllowClobber
                  Install-Module -Name Az.Blueprint -AllowClobber
                  Import-Module -Name Az.Blueprint
                  Write-Host "Successfully installed Az Module and Az.Blueprint Module"
                }
          - task: AzurePowershell@5
            name: "Set_BuildInfo"
            displayName: "Set Build Information"
            inputs:
              azureSubscription: $(azConnection)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                ###################################################################################################
                ############################# SET AZ BLUEPRINT FACTS FOR BUILD PURPOSES ###########################
                ###################################################################################################

                $azBlueprint = Get-AzBlueprint -Name $(blueprintName) -SubscriptionId $(azSubscriptionId)
                $preConversionVersion = $azBlueprint.Versions[$azBlueprint.Versions.Length-1]
                $bpLastVersion = [Double]$preConversionVersion.Split("_")[0]
                $bpNewVersion = $bpLastVersion + 0.1
                Write-Host "Azure Blueprint Details" -ForegroundColor DarkCyan
                Write-Host "Blueprint's Name: $(blueprintName)" -ForegroundColor DarkCyan
                Write-Host "Blueprint's Target: Subscription with ID $(azSubscriptionId)" -ForegroundColor DarkCyan
                $bpCodeDir = "$(blueprintsPath)" + "$(blueprintName)"
                Write-Host "Blueprint's Code Directory: $bpCodeDir" -ForegroundColor DarkCyan
                Write-Host "Blueprint's Last Version: $bpLastVersion" -ForegroundColor DarkCyan
                Write-Host "Blueprint's New Version: $bpNewVersion" -ForegroundColor DarkCyan

                Write-Host "Converting the variables to Azure DevOps ENV Vars"
                Write-Host "##vso[task.setvariable variable=AZBLUEPRINT;isOutput=true]$azBlueprint"
                Write-Host "##vso[task.setvariable variable=BPLASTVERSION;isOutput=true]$bpLastVersion"
                Write-Host "##vso[task.setvariable variable=BPNEWVERSION;isOutput=true]$bpNewVersion"
                Write-Host "##vso[task.setvariable variable=BPCODEDIR;isOutput=true]$bpCodeDir"

          - task: AzurePowerShell@5
            name: "AzBlueprint_SaveDraft"
            displayName: "AzBlueprint - DRAFT"
            inputs:
              azureSubscription: $(azConnection)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                $azBlueprintDraft = Import-AzBlueprintWithArtifact -Name $(blueprintName) -SubscriptionId $(azSubscriptionId) -InputPath $(Set_BuildInfo.BPCODEDIR) -Force -Confirm:$false -WhatIf
                If ($azBlueprintDraft -eq $null) {
                  Import-AzBlueprintWithArtifact -Name $(blueprintName) -SubscriptionId $(azSubscriptionId) -InputPath $(Set_BuildInfo.BPCODEDIR) -Force -Confirm:$false
                  Write-Host "Blueprint Draft saved successfully."
                } Else {
                  Write-Host "Check your draft - an error occurred."
                }

      - job: "AzBlueprint_TEST"
        displayName: "Publish TEST"
        dependsOn: "Build_Blueprint"
        variables:
          vsoAzBlueprint: $[ dependencies.Build_Blueprint.outputs['Set_BuildInfo.AZBLUEPRINT'] ]
          vsoBpLastVersion: $[ dependencies.Build_Blueprint.outputs['Set_BuildInfo.BPLASTVERSION'] ]
          vsoBpNewVersion: $[ dependencies.Build_Blueprint.outputs['Set_BuildInfo.BPNEWVERSION'] ]
          vsoBpCodeDir: $[ dependencies.Build_Blueprint.outputs['Set_BuildInfo.BPCODEDIR'] ]
        steps:
          - task: AzurePowerShell@5
            name: "AzBlueprint_PublishTEST"
            displayName: "AzBlueprint - Publish TEST"
            inputs:
              azureSubscription: $(azConnection)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                $azBlueprint = Get-AzBlueprint -Name $(blueprintName) -SubscriptionId $(azSubscriptionId)
                $bpNewVersion_TEST = [String]$(vsoBpNewVersion) + "_TEST"
                Publish-AzBlueprint -Blueprint $azBlueprint -Version $bpNewVersion_TEST -ChangeNote "Changes on commitId $($env:BUILD_SOURCEVERSION)"
                Write-Host "##vso[task.setvariable variable=vsoBpNewVersion_TEST;isOutput=true]$bpNewVersion_TEST"
          - task: AzurePowerShell@5
            name: "AzBlueprint_AssignTEST"
            displayName: "AzBlueprint - Assign TEST"
            inputs:
              azureSubscription: $(azConnection)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                Write-Host "Assign the TEST version"

                ########################### GET THE LATEST PUBLISHED VERSION FROM AZURE
                ########################### TAKE THE ASSIGNMENT FILE AS YOUR PARAMETER FILE
                ########################### IF THE CONTENT IN YOUR PARAMETER FILE DOES NOT MATCH WITH THE LATEST PUBLISHED VERSION IN AZURE
                ########################### THEN MAKE THE CONTENT OF THE PARAMETER FILE MATCH IT

                $paramPath = "$(vsoBpCodeDir)/$(organization)AssignmentTest.json"
                $latestPublishedVersion = Get-AzBlueprint -Name $(blueprintName) -SubscriptionId $(azSubscriptionId) -LatestPublished
                $content = Get-Content -Path $paramPath -Raw | ConvertFrom-Json
                $content.properties | ForEach-Object {
                  If ($_.blueprintId -ne $latestPublishedVersion.Id) {
                    $_.blueprintId = $latestPublishedVersion.Id
                  }
                }
                $content | ConvertTo-Json -Depth 100 | Set-Content $paramPath
                
                ########################### GET THE BLUEPRINT ASSIGNMENT IF EXISTS
                ########################### IF IT EXISTS ALREADY, THEN UPDATE IT WITH THE TEST VERSION
                ########################### IF IT DOES NOT, THEN CREATE THE ASSIGNMENT WITH THE LATEST TEST VERSION
                $testAssignmentName = "$(blueprintName)-$(organization)Assignment_TEST"
                $existingBp = Get-AzBlueprintAssignment -Name $testAssignmentName -SubscriptionId $(azSubscriptionId) -ErrorAction "SilentlyContinue"

                If ($existingBp) {
                  Set-AzBlueprintAssignment -Name $testAssignmentName -Blueprint $latestPublishedVersion -AssignmentFile $paramPath -SubscriptionId $(azSubscriptionId)
                } Else {
                  Write-Host "The assignment does not exist yet. Let's create it..."
                  New-AzBlueprintAssignment -Name $testAssignmentName -Blueprint $latestPublishedVersion -AssignmentFile $paramPath -SubscriptionId $(azSubscriptionId)
                }

                ########################### WAIT FOR THE ASSIGNMENT TO COMPLETE
                $timeout = New-Timespan -Seconds 500
                $sw = [Diagnostics.StopWatch]::StartNew()

                While (($sw.elapsed -lt $timeout) -and ($assignmentStatus.ProvisioningState -ne "Succeeded") -and ($assignmentStatus.ProvisioningState -ne "Failed")) {
                  $assignmentStatus = Get-AzBlueprintAssignment -Name $testAssignmentName -SubscriptionId $(azSubscriptionId)
                  If ($assignmentStatus.ProvisioningState -eq "Failed") {
                    Throw "Assignment FAILED. See Azure Portal for more details..."
                    break
                  }
                }

                If ($assignmentStatus.ProvisioningState -ne "Succeeded") {
                  Write-Host "Assignment has timedout, activity is exiting."
                }
          - task: AzurePowerShell@5
            name: "AzBlueprint_PublishSTABLE"
            displayName: "AzBlueprint - Publish STABLE"
            inputs:
              azureSubscription: $(azConnection)
              azurePowerShellVersion: "LatestVersion"
              ScriptType: "InlineScript"
              Inline: |
                $bpNewVersion_STABLE = [String]$(vsoBpNewVersion) + "_STABLE"
                $azBlueprint = Get-AzBlueprint -Name $(blueprintName) -SubscriptionId $(azSubscriptionId)
                Publish-AzBlueprint -Blueprint $azBlueprint -Version $bpNewVersion_STABLE -ChangeNote "Publish STABLE version; Successfully tested $(AzBlueprint_PublishTEST.vsoBpNewVersion_TEST)"
                